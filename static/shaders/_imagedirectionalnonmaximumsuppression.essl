uniform sampler2D texture;
varying vec2 vUv;

uniform float imageWidth;
uniform float imageHeight;

uniform float upperThreshold;
uniform float lowerThreshold;

void main()
{
    vec3 currentGradientAndDirection = texture2D(texture, vUv).rgb;
    vec2 gradientDirection = ((currentGradientAndDirection.gb * 2.0) - 1.0) * vec2(1.0/imageWidth, 1.0/imageHeight);

    float firstSampledGradientMagnitude = texture2D(texture, vUv + gradientDirection).r;
    float secondSampledGradientMagnitude = texture2D(texture, vUv - gradientDirection).r;

    float multiplier = step(firstSampledGradientMagnitude, currentGradientAndDirection.r);
    multiplier = multiplier * step(secondSampledGradientMagnitude, currentGradientAndDirection.r);

    float thresholdCompliance = smoothstep(lowerThreshold, upperThreshold, currentGradientAndDirection.r);
    multiplier = multiplier * thresholdCompliance;

    gl_FragColor = vec4(multiplier, multiplier, multiplier, 1.0);
}